import React, { useState } from 'react';
import { Card, Button, Input, Alert } from '@/components/ui';
import { showNotification } from '@/components/ui';

interface TreatmentPlan {
  id: string;
  title: string;
  doctor: string;
  date: string;
  description: string;
  procedures: string[];
  medications: string[];
  duration: string;
  status: 'active' | 'completed' | 'paused';
  notes: string;
}

const PatientTreatmentPlan = () => {
  const [isAdding, setIsAdding] = useState(false);
  const [isLoading, setIsLoading] = useState(false);

  // Mock data - in real app, this would come from API
  const [treatmentPlans, setTreatmentPlans] = useState<TreatmentPlan[]>([
    {
      id: '1',
      title: 'ƒêi·ªÅu tr·ªã vi√™m n∆∞·ªõu',
      doctor: 'BS. Nguy·ªÖn VƒÉn A',
      date: '2024-01-15',
      description: 'K·∫ø ho·∫°ch ƒëi·ªÅu tr·ªã vi√™m n∆∞·ªõu c·∫•p t√≠nh',
      procedures: [
        'L√†m s·∫°ch rƒÉng chuy√™n nghi·ªáp',
        'ƒêi·ªÅu tr·ªã b·∫±ng laser',
        'H∆∞·ªõng d·∫´n v·ªá sinh rƒÉng mi·ªáng'
      ],
      medications: [
        'Thu·ªëc kh√°ng vi√™m: Ibuprofen 400mg',
        'N∆∞·ªõc s√∫c mi·ªáng: Chlorhexidine 0.12%',
        'Kem ƒë√°nh rƒÉng: Sensodyne'
      ],
      duration: '2 tu·∫ßn',
      status: 'active',
      notes: 'C·∫ßn t√°i kh√°m sau 1 tu·∫ßn ƒë·ªÉ ƒë√°nh gi√° ti·∫øn tri·ªÉn'
    },
    {
      id: '2',
      title: 'Tr√°m rƒÉng s√¢u',
      doctor: 'BS. Tr·∫ßn Th·ªã B',
      date: '2024-01-20',
      description: 'K·∫ø ho·∫°ch tr√°m rƒÉng h√†m d∆∞·ªõi b√™n tr√°i',
      procedures: [
        'G√¢y t√™ c·ª•c b·ªô',
        'Lo·∫°i b·ªè m√¥ s√¢u',
        'Tr√°m composite',
        'ƒê√°nh b√≥ng b·ªÅ m·∫∑t'
      ],
      medications: [
        'Thu·ªëc t√™: Lidocaine 2%',
        'Thu·ªëc gi·∫£m ƒëau: Paracetamol 500mg'
      ],
      duration: '1 ng√†y',
      status: 'completed',
      notes: 'Tr√°m rƒÉng ho√†n th√†nh, c·∫ßn theo d√µi'
    }
  ]);

  const handleAddPlan = async () => {
    setIsLoading(true);
    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1000));
      showNotification.success('Th√™m ph√°c ƒë·ªì ƒëi·ªÅu tr·ªã th√†nh c√¥ng!');
      setIsAdding(false);
    } catch (error) {
      showNotification.error('C√≥ l·ªói x·∫£y ra khi th√™m ph√°c ƒë·ªì');
    } finally {
      setIsLoading(false);
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'active':
        return 'bg-green-100 text-green-800';
      case 'completed':
        return 'bg-blue-100 text-blue-800';
      case 'paused':
        return 'bg-yellow-100 text-yellow-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  const getStatusText = (status: string) => {
    switch (status) {
      case 'active':
        return 'ƒêang th·ª±c hi·ªán';
      case 'completed':
        return 'Ho√†n th√†nh';
      case 'paused':
        return 'T·∫°m d·ª´ng';
      default:
        return 'Kh√¥ng x√°c ƒë·ªãnh';
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-6">
            <div>
              <h1 className="text-3xl font-bold text-gray-900">Ph√°c ƒë·ªì ƒëi·ªÅu tr·ªã</h1>
              <p className="text-gray-600 mt-1">
                K·∫ø ho·∫°ch ƒëi·ªÅu tr·ªã ƒë∆∞·ª£c b√°c sƒ© ch·ªâ ƒë·ªãnh
              </p>
            </div>
            <div className="flex space-x-3">
              <Button 
                onClick={() => setIsAdding(true)} 
                variant="primary"
              >
                Th√™m ph√°c ƒë·ªì
              </Button>
            </div>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Summary Cards */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
          <Card className="p-6">
            <div className="flex items-center">
              <div className="p-2 bg-blue-100 rounded-lg">
                <span className="text-2xl">üìù</span>
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-500">T·ªïng ph√°c ƒë·ªì</p>
                <p className="text-2xl font-bold text-gray-900">{treatmentPlans.length}</p>
              </div>
            </div>
          </Card>
          
          <Card className="p-6">
            <div className="flex items-center">
              <div className="p-2 bg-green-100 rounded-lg">
                <span className="text-2xl">üîÑ</span>
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-500">ƒêang th·ª±c hi·ªán</p>
                <p className="text-2xl font-bold text-gray-900">
                  {treatmentPlans.filter(p => p.status === 'active').length}
                </p>
              </div>
            </div>
          </Card>
          
          <Card className="p-6">
            <div className="flex items-center">
              <div className="p-2 bg-blue-100 rounded-lg">
                <span className="text-2xl">‚úÖ</span>
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-500">Ho√†n th√†nh</p>
                <p className="text-2xl font-bold text-gray-900">
                  {treatmentPlans.filter(p => p.status === 'completed').length}
                </p>
              </div>
            </div>
          </Card>
          
          <Card className="p-6">
            <div className="flex items-center">
              <div className="p-2 bg-yellow-100 rounded-lg">
                <span className="text-2xl">‚è∏Ô∏è</span>
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-500">T·∫°m d·ª´ng</p>
                <p className="text-2xl font-bold text-gray-900">
                  {treatmentPlans.filter(p => p.status === 'paused').length}
                </p>
              </div>
            </div>
          </Card>
        </div>

        {/* Treatment Plans */}
        <div className="space-y-6">
          {treatmentPlans.map((plan) => (
            <Card key={plan.id} className="p-6">
              <div className="flex justify-between items-start mb-4">
                <div>
                  <h3 className="text-lg font-semibold text-gray-900">
                    {plan.title}
                  </h3>
                  <p className="text-gray-600">
                    B√°c sƒ©: {plan.doctor} ‚Ä¢ Ng√†y: {plan.date}
                  </p>
                </div>
                <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(plan.status)}`}>
                  {getStatusText(plan.status)}
                </span>
              </div>

              <div className="mb-4">
                <h4 className="font-medium text-gray-900 mb-2">M√¥ t·∫£</h4>
                <p className="text-gray-700 text-sm">{plan.description}</p>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-4">
                <div>
                  <h4 className="font-medium text-gray-900 mb-2">Quy tr√¨nh ƒëi·ªÅu tr·ªã</h4>
                  <ul className="text-gray-700 text-sm space-y-1">
                    {plan.procedures.map((procedure, index) => (
                      <li key={index} className="flex items-center">
                        <span className="w-2 h-2 bg-blue-500 rounded-full mr-2"></span>
                        {procedure}
                      </li>
                    ))}
                  </ul>
                </div>

                <div>
                  <h4 className="font-medium text-gray-900 mb-2">Thu·ªëc ƒëi·ªÅu tr·ªã</h4>
                  <ul className="text-gray-700 text-sm space-y-1">
                    {plan.medications.map((medication, index) => (
                      <li key={index} className="flex items-center">
                        <span className="w-2 h-2 bg-green-500 rounded-full mr-2"></span>
                        {medication}
                      </li>
                    ))}
                  </ul>
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-4">
                <div>
                  <h4 className="font-medium text-gray-900 mb-2">Th·ªùi gian ƒëi·ªÅu tr·ªã</h4>
                  <p className="text-gray-700 text-sm">{plan.duration}</p>
                </div>

                <div>
                  <h4 className="font-medium text-gray-900 mb-2">Ghi ch√∫</h4>
                  <p className="text-gray-700 text-sm">{plan.notes}</p>
                </div>
              </div>

              <div className="pt-4 border-t border-gray-200">
                <div className="flex justify-end space-x-3">
                  <Button variant="outline" size="sm">
                    Xem chi ti·∫øt
                  </Button>
                  <Button variant="primary" size="sm">
                    T·∫£i xu·ªëng
                  </Button>
                </div>
              </div>
            </Card>
          ))}
        </div>

        {/* Add New Treatment Plan Modal */}
        {isAdding && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
            <Card className="w-full max-w-3xl max-h-[90vh] overflow-y-auto">
              <div className="p-6">
                <div className="flex justify-between items-center mb-6">
                  <h3 className="text-lg font-semibold text-gray-900">
                    Th√™m ph√°c ƒë·ªì ƒëi·ªÅu tr·ªã m·ªõi
                  </h3>
                  <button
                    onClick={() => setIsAdding(false)}
                    className="text-gray-400 hover:text-gray-600"
                  >
                    <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                    </svg>
                  </button>
                </div>

                <form className="space-y-4">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        T√™n ph√°c ƒë·ªì
                      </label>
                      <Input placeholder="T√™n ph√°c ƒë·ªì ƒëi·ªÅu tr·ªã" />
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        B√°c sƒ© ch·ªâ ƒë·ªãnh
                      </label>
                      <Input placeholder="T√™n b√°c sƒ©" />
                    </div>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      M√¥ t·∫£
                    </label>
                    <textarea
                      rows={3}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="M√¥ t·∫£ ph√°c ƒë·ªì ƒëi·ªÅu tr·ªã..."
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Quy tr√¨nh ƒëi·ªÅu tr·ªã
                    </label>
                    <textarea
                      rows={4}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Li·ªát k√™ c√°c b∆∞·ªõc ƒëi·ªÅu tr·ªã..."
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Thu·ªëc ƒëi·ªÅu tr·ªã
                    </label>
                    <textarea
                      rows={3}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Danh s√°ch thu·ªëc..."
                    />
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Th·ªùi gian ƒëi·ªÅu tr·ªã
                      </label>
                      <Input placeholder="V√≠ d·ª•: 2 tu·∫ßn" />
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Tr·∫°ng th√°i
                      </label>
                      <select className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                        <option value="active">ƒêang th·ª±c hi·ªán</option>
                        <option value="paused">T·∫°m d·ª´ng</option>
                        <option value="completed">Ho√†n th√†nh</option>
                      </select>
                    </div>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Ghi ch√∫
                    </label>
                    <textarea
                      rows={3}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Ghi ch√∫ th√™m..."
                    />
                  </div>

                  <div className="flex justify-end space-x-3 pt-4">
                    <Button 
                      onClick={() => setIsAdding(false)} 
                      variant="outline"
                    >
                      H·ªßy
                    </Button>
                    <Button 
                      onClick={handleAddPlan}
                      variant="primary"
                      loading={isLoading}
                    >
                      L∆∞u ph√°c ƒë·ªì
                    </Button>
                  </div>
                </form>
              </div>
            </Card>
          </div>
        )}
      </div>
    </div>
  );
};

export default PatientTreatmentPlan;
